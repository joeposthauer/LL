{"ast":null,"code":"import _slicedToArray from \"/Users/joeposthauer/Desktop/Udemy- Webdev/React/es6-spread-operator-practice/using-pre-built-react-components-completed/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/joeposthauer/Desktop/Udemy- Webdev/React/es6-spread-operator-practice/using-pre-built-react-components-completed/src/components/Submit.jsx\";\nimport React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\"; //import { nodeModuleNameResolver } from \"typescript\";\n\nfunction Submit(props) {\n  var _useForm = useForm(),\n      register = _useForm.register,\n      handleSubmit = _useForm.handleSubmit;\n\n  var _useState = useState({\n    nodes: [],\n    edges: []\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var onSubmit = function onSubmit(d) {\n    //Receive user file, then make into JSON string\n    var file = d.userFile[0];\n    var reader = new FileReader();\n\n    reader.onload = function () {\n      var readFile = reader.result;\n      var parsedFile = JSON.parse(readFile); //Create nodes and edge arrays for node creation with cyto\n\n      var nodesJson = parsedFile.display.nodes;\n      var edgesJson = parsedFile.display.edges;\n      Object.entries(nodesJson).forEach(function (entry) {\n        data.nodes.push(entry);\n      });\n      Object.entries(edgesJson).forEach(function (entry) {\n        data.edges.push(entry);\n      });\n      props.onSubm(data.nodes, data.edges);\n      props.onAdd(data);\n    };\n\n    reader.readAsText(file);\n    preventDefault();\n  };\n\n  return (\n    /*#__PURE__*/\n    //form for inputting JSON file\n    React.createElement(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", Object.assign({}, register(\"userFile\"), {\n      type: \"file\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }\n    }, \"Submit\"))\n  );\n}\n\nexport default Submit;","map":{"version":3,"names":["React","useState","useForm","Submit","props","register","handleSubmit","nodes","edges","data","setData","onSubmit","d","file","userFile","reader","FileReader","onload","readFile","result","parsedFile","JSON","parse","nodesJson","display","edgesJson","Object","entries","forEach","entry","push","onSubm","onAdd","readAsText","preventDefault"],"sources":["/Users/joeposthauer/Desktop/Udemy- Webdev/React/es6-spread-operator-practice/using-pre-built-react-components-completed/src/components/Submit.jsx"],"sourcesContent":["import React, {useState} from \"react\";\nimport { useForm } from \"react-hook-form\";\n//import { nodeModuleNameResolver } from \"typescript\";\n\n\nfunction Submit(props) {\n    const { register, handleSubmit } = useForm()\n    const [data, setData] = useState({\n        nodes: [],\n        edges: []\n    })\n\n    \n\n\n    const onSubmit = (d) => {\n\n        //Receive user file, then make into JSON string\n        const file = d.userFile[0]\n        const reader = new FileReader();\n        reader.onload = function () {\n\n            const readFile = reader.result;\n            const parsedFile = JSON.parse(readFile);\n\n\n            //Create nodes and edge arrays for node creation with cyto\n            \n            const nodesJson = parsedFile.display.nodes;\n            const edgesJson = parsedFile.display.edges;\n            Object.entries(nodesJson).forEach((entry)=> {\n                data.nodes.push(entry);\n            })\n            Object.entries(edgesJson).forEach((entry)=> {\n                data.edges.push(entry);\n            })\n\n            props.onSubm(data.nodes, data.edges);\n            props.onAdd(data);\n\n        }\n        reader.readAsText(file);\n\n        preventDefault();\n    }\n\n    return (\n        //form for inputting JSON file\n        <form onSubmit={handleSubmit(onSubmit)}>\n            <input {...register(\"userFile\")} type=\"file\" />\n            <button >Submit</button>\n        </form>\n    )\n\n}\n\nexport default Submit;"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAASC,OAAT,QAAwB,iBAAxB,C,CACA;;AAGA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;EACnB,eAAmCF,OAAO,EAA1C;EAAA,IAAQG,QAAR,YAAQA,QAAR;EAAA,IAAkBC,YAAlB,YAAkBA,YAAlB;;EACA,gBAAwBL,QAAQ,CAAC;IAC7BM,KAAK,EAAE,EADsB;IAE7BC,KAAK,EAAE;EAFsB,CAAD,CAAhC;EAAA;EAAA,IAAOC,IAAP;EAAA,IAAaC,OAAb;;EAQA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,CAAD,EAAO;IAEpB;IACA,IAAMC,IAAI,GAAGD,CAAC,CAACE,QAAF,CAAW,CAAX,CAAb;IACA,IAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;;IACAD,MAAM,CAACE,MAAP,GAAgB,YAAY;MAExB,IAAMC,QAAQ,GAAGH,MAAM,CAACI,MAAxB;MACA,IAAMC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWJ,QAAX,CAAnB,CAHwB,CAMxB;;MAEA,IAAMK,SAAS,GAAGH,UAAU,CAACI,OAAX,CAAmBjB,KAArC;MACA,IAAMkB,SAAS,GAAGL,UAAU,CAACI,OAAX,CAAmBhB,KAArC;MACAkB,MAAM,CAACC,OAAP,CAAeJ,SAAf,EAA0BK,OAA1B,CAAkC,UAACC,KAAD,EAAU;QACxCpB,IAAI,CAACF,KAAL,CAAWuB,IAAX,CAAgBD,KAAhB;MACH,CAFD;MAGAH,MAAM,CAACC,OAAP,CAAeF,SAAf,EAA0BG,OAA1B,CAAkC,UAACC,KAAD,EAAU;QACxCpB,IAAI,CAACD,KAAL,CAAWsB,IAAX,CAAgBD,KAAhB;MACH,CAFD;MAIAzB,KAAK,CAAC2B,MAAN,CAAatB,IAAI,CAACF,KAAlB,EAAyBE,IAAI,CAACD,KAA9B;MACAJ,KAAK,CAAC4B,KAAN,CAAYvB,IAAZ;IAEH,CApBD;;IAqBAM,MAAM,CAACkB,UAAP,CAAkBpB,IAAlB;IAEAqB,cAAc;EACjB,CA7BD;;EA+BA;IAAA;IACI;IACA;MAAM,QAAQ,EAAE5B,YAAY,CAACK,QAAD,CAA5B;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,gBACI,+CAAWN,QAAQ,CAAC,UAAD,CAAnB;MAAiC,IAAI,EAAC,MAAtC;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GADJ,eAEI;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,YAFJ;EAFJ;AAQH;;AAED,eAAeF,MAAf"},"metadata":{},"sourceType":"module"}